# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from coin_algorithm.service.grpc import coin_service_pb2 as coin__service__pb2

GRPC_GENERATED_VERSION = '1.66.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in coin_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CoinAlgorithmServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTimeTravel = channel.unary_unary(
                '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/GetTimeTravel',
                request_serializer=coin__service__pb2.GetTimeTravelRequest.SerializeToString,
                response_deserializer=coin__service__pb2.GetTimeTravelResponse.FromString,
                _registered_method=True)
        self.CreateBackTest = channel.unary_unary(
                '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/CreateBackTest',
                request_serializer=coin__service__pb2.CreateBackTestRequest.SerializeToString,
                response_deserializer=coin__service__pb2.CreateBackTestResponse.FromString,
                _registered_method=True)
        self.CreateOnlineRun = channel.unary_unary(
                '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/CreateOnlineRun',
                request_serializer=coin__service__pb2.CreateOnlineRunRequest.SerializeToString,
                response_deserializer=coin__service__pb2.CreateOnlineResponse.FromString,
                _registered_method=True)
        self.GetTradeMetadata = channel.unary_unary(
                '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/GetTradeMetadata',
                request_serializer=coin__service__pb2.GetTradeMetadataRequest.SerializeToString,
                response_deserializer=coin__service__pb2.GetTradeMetadataResponse.FromString,
                _registered_method=True)
        self.StreamCandle = channel.unary_stream(
                '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/StreamCandle',
                request_serializer=coin__service__pb2.StreamCandleRequest.SerializeToString,
                response_deserializer=coin__service__pb2.StreamCandleResponse.FromString,
                _registered_method=True)
        self.GetSignal = channel.unary_unary(
                '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/GetSignal',
                request_serializer=coin__service__pb2.GetSignalRequest.SerializeToString,
                response_deserializer=coin__service__pb2.GetSignalResponse.FromString,
                _registered_method=True)
        self.GetOrderStatus = channel.unary_unary(
                '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/GetOrderStatus',
                request_serializer=coin__service__pb2.GetOrderStatusRequest.SerializeToString,
                response_deserializer=coin__service__pb2.GetOrderStatusResponse.FromString,
                _registered_method=True)
        self.CreateOrder = channel.unary_unary(
                '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/CreateOrder',
                request_serializer=coin__service__pb2.CreateOrderRequest.SerializeToString,
                response_deserializer=coin__service__pb2.CreateOrderResponse.FromString,
                _registered_method=True)
        self.CancelOrder = channel.unary_unary(
                '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/CancelOrder',
                request_serializer=coin__service__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=coin__service__pb2.CancelOrderResponse.FromString,
                _registered_method=True)


class CoinAlgorithmServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTimeTravel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBackTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateOnlineRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTradeMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCandle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoinAlgorithmServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTimeTravel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTimeTravel,
                    request_deserializer=coin__service__pb2.GetTimeTravelRequest.FromString,
                    response_serializer=coin__service__pb2.GetTimeTravelResponse.SerializeToString,
            ),
            'CreateBackTest': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBackTest,
                    request_deserializer=coin__service__pb2.CreateBackTestRequest.FromString,
                    response_serializer=coin__service__pb2.CreateBackTestResponse.SerializeToString,
            ),
            'CreateOnlineRun': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOnlineRun,
                    request_deserializer=coin__service__pb2.CreateOnlineRunRequest.FromString,
                    response_serializer=coin__service__pb2.CreateOnlineResponse.SerializeToString,
            ),
            'GetTradeMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTradeMetadata,
                    request_deserializer=coin__service__pb2.GetTradeMetadataRequest.FromString,
                    response_serializer=coin__service__pb2.GetTradeMetadataResponse.SerializeToString,
            ),
            'StreamCandle': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamCandle,
                    request_deserializer=coin__service__pb2.StreamCandleRequest.FromString,
                    response_serializer=coin__service__pb2.StreamCandleResponse.SerializeToString,
            ),
            'GetSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignal,
                    request_deserializer=coin__service__pb2.GetSignalRequest.FromString,
                    response_serializer=coin__service__pb2.GetSignalResponse.SerializeToString,
            ),
            'GetOrderStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderStatus,
                    request_deserializer=coin__service__pb2.GetOrderStatusRequest.FromString,
                    response_serializer=coin__service__pb2.GetOrderStatusResponse.SerializeToString,
            ),
            'CreateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrder,
                    request_deserializer=coin__service__pb2.CreateOrderRequest.FromString,
                    response_serializer=coin__service__pb2.CreateOrderResponse.SerializeToString,
            ),
            'CancelOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=coin__service__pb2.CancelOrderRequest.FromString,
                    response_serializer=coin__service__pb2.CancelOrderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coin.algorithm.grpc.service.generated.CoinAlgorithmService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('coin.algorithm.grpc.service.generated.CoinAlgorithmService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CoinAlgorithmService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTimeTravel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/GetTimeTravel',
            coin__service__pb2.GetTimeTravelRequest.SerializeToString,
            coin__service__pb2.GetTimeTravelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateBackTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/CreateBackTest',
            coin__service__pb2.CreateBackTestRequest.SerializeToString,
            coin__service__pb2.CreateBackTestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateOnlineRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/CreateOnlineRun',
            coin__service__pb2.CreateOnlineRunRequest.SerializeToString,
            coin__service__pb2.CreateOnlineResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTradeMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/GetTradeMetadata',
            coin__service__pb2.GetTradeMetadataRequest.SerializeToString,
            coin__service__pb2.GetTradeMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamCandle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/StreamCandle',
            coin__service__pb2.StreamCandleRequest.SerializeToString,
            coin__service__pb2.StreamCandleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/GetSignal',
            coin__service__pb2.GetSignalRequest.SerializeToString,
            coin__service__pb2.GetSignalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrderStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/GetOrderStatus',
            coin__service__pb2.GetOrderStatusRequest.SerializeToString,
            coin__service__pb2.GetOrderStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/CreateOrder',
            coin__service__pb2.CreateOrderRequest.SerializeToString,
            coin__service__pb2.CreateOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coin.algorithm.grpc.service.generated.CoinAlgorithmService/CancelOrder',
            coin__service__pb2.CancelOrderRequest.SerializeToString,
            coin__service__pb2.CancelOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
